#!/usr/bin/env python
# -*- coding:utf-8 -*-
# @FileName  :字符串驻留机制.py
# @Time      :2024/03/17 20:56:16
# @Author    :Baikal
# @Motto     :我亦无他,唯手熟尔
import sys

# 字符串驻留机制
"""
python仅保留一份相同且不可变的字符串,不同的值存放在字符串的驻留池中,python的驻留机制对相同的字符串只保留一份拷贝,后续创建相同字符串时,不会开辟新空间,而是把该字符串的地址赋给新创建的变量
"""
str1 = "hello"
str2 = "hello"
str3 = "hello"
# id()函数是，可以返回对象/数据的内存地址
print("str1的地址:", id(str1))
print("str2的地址:", id(str2))
print("str3的地址:", id(str3))
# !驻留机制的几种情况
"""
!1.字符串是由26位英文字母大小写,0~9,_组成
!2.字符串长度为0或1时
!3.字符串在编译时进行驻留，而非运行时
!4. [-5,256]的整数数字
"""
# 在原生的python 环境中地址是不相同的，但是vscode或者pycharm对python进行了优化，即使不满足以上条件也会保持驻留，地址相同
str1 = "abc#"
str2 = "abc#"
# !这里的# 不在”不在字符串是由26位英文字母大小写,0~9,_组成"条件中,所以没有发生驻留机制
print(id(str1), id(str2))
# !字符串长度为0或1时
a = ""
b = ""
print(id(a))
print(id(b))
a1 = "#"
a2 = "#"
print(id(a1))
print(id(a2))


# !3.字符串在编译时进行驻留，而非运行时
print("-------------------------------")
a3 = "abc"
a4 = "".join(["a", "bc"])
print(id(a3))
print(id(a4))
print("-------------------------------")
"""
a3和a4的结果都是"abc"但是a4是在运行后才能得出结果,所以不能发生驻留机制

"""

# !4. [-5,256]的整数数字
str5 = -5
str6 = -5
print(id(str5), id(str6))
# 因为-5属于[-5,256]的区间，所以存在驻留机制

str7 = -100
str8 = -100
print(id(str7), id(str8))
# 因为-100不属于[-5,256]的区间，所以不存在驻留机制

# !字符串驻留机制的好处:当需要值相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率节约内存。


# ! sys的intern方法可以强制2个字符串指向同一个对象
s1 = "abc#"
s2 = sys.intern(s1)
print(id(s1), id(s2))
