#!/usr/bin/env python
# -*- coding:utf-8 -*-
# @FileName  :22.位运算.py
# @Time      :2024/03/24 13:23:41
# @Author    :Baikal
# @Motto     :我亦无他,唯手熟尔
"""
! ~ 按位取反:对数据的每个二进制位取反,把1变成0,0变成1
分析 ~ -2 , ~ 2
假定使用一个字节来表示
-2的补码 -> 原码:1000 0010 ->反码1111 1101 ->补码 1111 1110
~ -2取反 0000 0001(补码)正数三码合一，补码即原码 转换十进制=>1
~ 2的补码 -> 原码:0000 0010 ->取反 1111 1101(补码取反)  ->1111 1100(补码变反码-1)->原码 1000 0011

"""
print(~-2)
print(~2)
"""
! & 按位与:参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
2&3=
2的补码 0000 0010
3的补码 0000 0011
2&3    0000 0010  ->原码0000 0010 ->十进制2

"""
print(2 & 3)
"""
! ^按位异或:参与运算的两个值,如果两个相应位相异时,则该位的结果为1,否则为0
2^-3的结果是
2的补码  0000 0010
-3的补码 原码:1000 0011 ->反码:1111 1100 ->补码:1111 1101
2^-3 0000 0010
     1111 1101
     1111 1111(补码) ->反码:1111 1110->原码:1000 0001 十进制 -1

"""
print(2 ^ -3)
"""
! |按位或:参与运算的两个值,如果两个相应位有一个为1时,则该位的结果为1
2|3的结果是
2的补码 0000 0010
3的补码 0000 0011
       0000 0011(补码)->三码合一 十进制是3
"""
print(2 | 3)
# 左移和右移
"""
左移:<<运算数的各二进制位全部左移若干位,由<<右边的数指定移动的位数,符号位不变,高位丢弃,底位补0
分析:5<<1 , -5<<1
5<<1 :5的补码 0000 0101
!左移多少位相当于就是乘以多少个2
符号位不变,高位丢弃,底位补0
0000 1010 ->三码合一 0000 1010(原码) 十进制10
-5<<1 :-5的原码 1000 0101 反码: 1111 1010 补码:1111 1011
符号位不变,高位丢弃,底位补0
1111 1011 ->1111 0110(补码) -> 反码:1111 0101 ->原码:1000 1010 十进制 -10
"""
print(5 << 1)  # 10
print(-5 << 1)  # - 10
"""
右移:把>>左边的运算数的各二进制位全部右移若干位,由>>右边的数指定移动的位数,低位溢出,符号位不变,并用符号位补溢出的高位
!右移多少位相当于就是除多少个2
! 向下取整,相当于整除
5>>1
-5>>1
5的补码 0000 0101 低位溢出,符号位不变 并用符号位补溢出的高位 0000 0010(补码即原码) 十进制是2
-5的补码 1111 1011 低位溢出,符号位不变 并用符号位补溢出的高位 1111 1101(补码) ->
反码1111 1100->原码 1000 0011 转换十进制 -3
"""
print(5 >> 1)
print(-5 >> 1)
print(8 >> 2)
print(-13 >> 2)

a = 1 >> 2
b = -1 >> 2
c = 1 << 2
d = -1 << 2
print(a)
print(b)
print(c)
print(d)

print(~2)
print(2 & 3)
print(2 | 3)
print(~-5)
print(13 & 7)
print(5 | 4)
print(-3 ^ 3)
